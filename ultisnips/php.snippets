snippet puf "Public function" !b
public function ${1:name}(${2:$param})
{
    ${VISUAL}${0:return null;}
}
endsnippet

snippet apuf "Abstract public function" !b
abstract public function ${1:name}(${2:$param});
endsnippet

snippet test "Test" !b
public function test${1:Everything}()
{
	$this->markTestIncomplete("@TODO: Implement Test.");
}
endsnippet

snippet puv "Public variable" !b
/**
 * @var ${2:mixed}
 */
public $${1:name};
endsnippet

snippet prof "Protected function" !b
protected function ${1:name}(${2:$param})
{
    ${VISUAL}${0:return null;}
}
endsnippet

snippet prov "Protected variable" !b
/**
 * @var ${2:mixed}
 */
protected $${1:name};
endsnippet

snippet prif "Private function" !b
private function ${1:name}(${2:$param})
{
    ${VISUAL}${0:return null;}
}
endsnippet

snippet priv "Private variable" !b
/**
 * @var ${2:mixed}
 */
private $${1:name};
endsnippet

snippet get "Getter function" !b
public function get${1/^\w.*$/\u$0/}()
{
    return $this->${1:variable};
}
$0
endsnippet

snippet set "Setter function" !b
public function set${1/^\w.*$/\u$0/}($${1:variable})
{
    $this->${1///} = $${1///};
}
$0
endsnippet

snippet getset "Getter and setter function" !b
public function get${1/^\w.*$/\u$0/}()
{
    return $this->${1:variable};
}

public function set${1/^\w.*$/\u$0/}($${1///})
{
    $this->${1///} = $${1///};
}
$0
endsnippet

snippet cons "Constructor" !b
private $${1///};

public function __construct($${1///})
{
    $this->${1:variable} = $${1///};
}
endsnippet

snippet ctor "Constructor" !b
`!p
snip.rv = ""
regex = re.compile("(?:\w+\s+)?\$([^, ]+),?")
argumentMatches = regex.findall(t[1])
for variable in argumentMatches:
	snip.rv += snip.mkline("private $" + variable + ";\n")
`
public function __construct(${1})
{
`!p
snip.shift()
snip.rv = ""
for variable in argumentMatches:
	snip.rv += snip.mkline("$this->" + variable + " = $" + variable + ";\n")
`
}
endsnippet

snippet dp "Data Provider" !b
public function ${1///}()
{
	return array(
		[],
	);
}

/**
 * @dataProvider ${1:dataProvider}
 */
endsnippet
